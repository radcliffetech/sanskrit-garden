import { StorySegment, getDefaultTopics, useStoryteller } from "~/hooks/storyteller";

import { FadeIn } from "~/components/ui/FadeIn";
import { PageFrame } from '~/components/ui/PageFrame';
import { PageHeader } from '~/components/ui/PageHeader';
import RenderMarkdown from "~/components/ui/RenderMarkdown";
import { SectionLoading } from "~/components/ui/SectionLoading";
import { useRef } from "react";

// UI Components
function StorytellerStorySegment({ content }: { content: string }) {
  return (
    <>
      <h3 className="text-lg text-gray-500 my-6">STORYTELLER</h3>
      <RenderMarkdown>
        {content}
      </RenderMarkdown>
    </>
  );
}

function StorySelectForm({
  selectedTopic,
  setSelectedTopic,
  handleStartStory,
  loading,
}: {
  selectedTopic: string | null;
  setSelectedTopic: (topic: string) => void;
  handleStartStory: () => void;
  loading: boolean;
}) {
  return (
    <>
      <div className="bg-gray-50 border rounded-lg shadow-md p-6 flex flex-col md:flex-row items-center justify-center gap-4 w-full max-w-3xl mx-auto text-sm">
        <h2 className="text-xl font-semibold text-gray-500 whitespace-nowrap">Tell me a story</h2>
        <select
          value={selectedTopic ?? ""}
          onChange={(e) => setSelectedTopic(e.target.value)}
          disabled={loading}
          className="border rounded-lg p-4 w-full md:w-auto text-lg shadow-sm bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
        >
          <option value="" disabled>Select a topic</option>
          {getDefaultTopics().map((topic) => (
            <option key={topic} value={topic}>
              {topic}
            </option>
          ))}
        </select>
        <button
          type="button"
          onClick={handleStartStory}
          disabled={loading || !selectedTopic}
          className={`bg-indigo-400 hover:bg-indigo-500 text-white px-6 py-4 rounded-lg text-lg transition ${selectedTopic ? "" : "opacity-50 cursor-not-allowed"}`}
        >
          {loading ? "Thinking..." : "Start"}
        </button>
      </div>
      <div className="p-6 flex flex-col md:flex-row items-center justify-center gap-4 w-full max-w-3xl mx-auto text-sm text-gray-400">
        This story is generated by AI and may not be accurate or complete, despite clear instructions its best efforts. Please be cautious
        and use your discernment.

      </div>
    </>
  );
}

function StoryLanding() {
  return (
    <div className="bg-gray-50 py-6 mt-8 max-w-3xl mx-auto text-start text-sm text-gray-600">
      <h2 className="text-xl font-semibold mb-4">Welcome, Traveler</h2>
      <p className="mb-2">
        Here, stories unfold like petals of a lotus, timeless and boundless.
      </p>
      <p className="mb-2">
        The tales you encounter are born from tradition and carried on the winds of modern imagination.
      </p>
      <p className="mb-2">
        As all rivers flow toward the sea, so do these stories seek the heart.
        Yet remember: what you read is but a reflection, not a final truth.
      </p>
      <p>
        Read slowly. Wander freely. Let the journey carry you beyond words.
      </p>
    </div>
  );
}

// Main Page Component
export default function StorytellerPage() {
  const {
    segments,
    questions,
    selectedTopic,
    loading,
    error,
    isStoryStarted,
    isStoryOver,
    selectedContinuation,
    setSelectedTopic,
    setIsStoryOver,
    handleStartStory,
    handleContinue,
    handleRestart,
    handleDownload,
  } = useStoryteller();

  const storyEndRef = useRef<HTMLDivElement>(null);

  const collectedReferences = Array.from(
    new Set(
      segments
        .filter((seg) => seg.reference)
        .map((seg) => seg.reference!.trim())
    )
  );

  return (
    <PageFrame>
      <PageHeader>Sanskrit AI Storyteller</PageHeader>
      {error && <p className="text-red-500 mb-6">{error}</p>}

      {!isStoryStarted ? (
        loading ? (
          <SectionLoading />
        ) : (
          <>
            <StoryLanding />
            <StorySelectForm
              selectedTopic={selectedTopic}
              setSelectedTopic={setSelectedTopic}
              handleStartStory={handleStartStory}
              loading={loading}
            />
          </>
        )
      ) : (
        // If story has started, show the story page
        <div className="border rounded-lg shadow-md p-6 mb-8 bg-white">
          <DisplayStoryHead segment={segments[0]} />
          {segments.slice(1).map((segment, idx) => (
            <FadeIn key={idx}>
              <DisplayStorySegment segment={segment} />
            </FadeIn>
          ))}
          {!isStoryOver && !loading && (
            <FadeIn>
              <div className="border-t border-gray-200 my-8" />
              <StoryQuestionBox
                questions={questions}
                loading={loading}
                selectedContinuation={selectedContinuation}
                handleContinue={handleContinue}
              />
            </FadeIn>
          )}
          {loading && (
            <FadeIn>
              <ListenerStorySegment text={questions[selectedContinuation ?? 0]} />
              <div className="prose max-w-none proseO-p:mb-6">
                <h3 className="text-lg text-gray-500">STORYTELLER</h3>
                <SectionLoading />
              </div>
            </FadeIn>
          )}
          {!loading && !isStoryOver && <EndStoryControl handleEndStory={() => setIsStoryOver(true)} />}
          {!loading && isStoryOver && (
            <FadeIn>
              <StoryEnd
                onDownload={handleDownload}
                onRestart={handleRestart}
              />
            </FadeIn>
          )}
          <div ref={storyEndRef} />
        </div>
      )}

      {/* References Section */}
      {collectedReferences.length > 0 && (
        <div className="p-6 mb-8">
          <h2 className="text-2xl font-semibold mb-4">References</h2>
          <ul className="list-disc list-inside text-sm text-gray-600">
            {collectedReferences.map((ref, idx) => (
              <li key={idx} className="mb-2 whitespace-pre-line">
                {ref}
              </li>
            ))}
          </ul>
        </div>
      )}
    </PageFrame>
  );
}

function DisplayStoryHead({ segment }: { segment: StorySegment }) {
  return (
    <div className="prose max-w-none mb-6 proseO-p:mb-6">
      <h1 className="text-3xl font-semibold mb-6">
        <RenderMarkdown>{segment.title}</RenderMarkdown>
      </h1>
      <StorytellerStorySegment content={segment.content} />
    </div>
  );
}

function ListenerStorySegment({ text }: { text: string }) {
  return (
    <div className="my-6">
      <h3 className="text-lg text-gray-500 my-6">LISTENER</h3>
      <RenderMarkdown>
        {text}
      </RenderMarkdown>
    </div>
  );
}

function DisplayStorySegment({ segment }: { segment: StorySegment }) {
  return (
    <div className="prose max-w-none mb-6 prose-p:mb-6 mt-6">
      {segment.followup && (
        <ListenerStorySegment text={segment.followup} />
      )}
      <StorytellerStorySegment content={segment.content} />
    </div>
  );
}
function StoryEnd({ onRestart, onDownload }: { onRestart: () => void; onDownload: () => void }) {
  return (
    <div className="prose max-w-none mb-8 prose-p:mb-6 text-center">
      <h2 className="text-2xl font-semibold mb-4">The End</h2>
      <div className="flex justify-center mt-4">
        <img
          src="/images/om.png"
          alt="Om Symbol"
          className="h-24 w-24 opacity-70"
        />
      </div>
      <p className="text-gray-600 italic text-2xl my-4">ॐ तत् सत्</p>
      <p className="text-gray-600 italic text-sm">Om Tat Sat</p>
      <div className="mt-8 text-sm text-gray-500">
        <p>This story was created using AI, an exploration and celebrating of Sanskrit literature, mythology, and storytelling and it intersection with modern technology.</p>
      </div>
      <div className="flex justify-center gap-4 mt-8">
        <button
          type="button"
          onClick={onDownload}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Download Story
        </button>
        <button
          type="button"
          onClick={() => {
            if (
              window.confirm(
                "Are you sure you want to start a new story? Your current story will be lost."
              )
            ) {
              onRestart();
            }
          }}
          className="px-4 py-2 bg-gray-400 text-white rounded hover:bg-gray-500"
        >
          Start New Story
        </button>
      </div>
    </div>
  );
}

function EndStoryControl({ handleEndStory }: { handleEndStory: () => void }) {
  return (
    <div className="mt-6 text-center">
      <button
        type="button"
        onClick={() => {
          if (
            window.confirm(
              "Are you sure you want to end the story? You won't be able to continue it afterward."
            )
          ) {
            handleEndStory();
          }
        }}
        className="text-sm text-gray-600 hover:underline"
      >
        End Story
      </button>
    </div>
  );
}

function StoryQuestionBox({
  questions,
  loading,
  selectedContinuation,
  handleContinue,
}: {
  questions: string[];
  loading: boolean;
  selectedContinuation: number | null;
  handleContinue: (index: number) => void;
}) {
  return (
    <div className="prose max-w-none">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {questions.map((q, idx) => {
          const isSelected = selectedContinuation === idx;
          const isFaded = selectedContinuation !== null && !isSelected;

          return (
            <button
              key={idx}
              type="button"
              disabled={loading || selectedContinuation !== null}
              onClick={() => handleContinue(idx)}
              className={`border rounded-lg shadow-md p-6 flex flex-col items-center justify-center text-center font-medium transition ${isSelected
                ? "bg-indigo-100 border-indigo-400"
                : isFaded
                  ? "opacity-30"
                  : "hover:bg-gray-100"
                }`}
            >
              <div className="font-semibold mb-2 text-center">
                <RenderMarkdown>
                  {q}
                </RenderMarkdown>
              </div>
            </button>
          );
        })}
      </div>

    </div>
  );
}
